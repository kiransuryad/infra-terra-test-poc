- powershell: |
    # Download and install Chocolatey directly
    Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
  displayName: 'Install Chocolatey using PowerShell'


- script: |
    $env:ChocolateyInstall/bin/choco install golang -y
    $env:ChocolateyInstall/bin/choco install terraform -y
  displayName: 'Install Go and Terraform using Chocolatey'
  env:
    ChocolateyInstall: C:\ProgramData\chocolatey


- powershell: |
    # Download and install Chocolatey directly
    Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    
    # Refresh environment variables to recognize choco
    $env:Path = [System.Environment]::GetEnvironmentVariable('Path','Machine')
    
    # Now install Go and Terraform using choco
    choco install golang -y
    choco install terraform -y
  displayName: 'Install Chocolatey and then Go and Terraform'


- powershell: |
    New-Item -Path '$(GOBIN)' -ItemType Directory -Force
    New-Item -Path '$(modulePath)' -ItemType Directory -Force
    Write-Host "##vso[task.prependpath]$(GOBIN)"
    Write-Host "##vso[task.prependpath]$(GOROOT)/bin"
  displayName: 'Set up the Go workspace'


- script: |
    echo %PATH%
    "C:\Program Files\Go\bin\go.exe" version
    "C:\Program Files\Go\bin\go.exe" env
  displayName: 'Verify Go Installation'


- script: |
    dir "$(modulePath)"
  displayName: 'List contents of modulePath for debugging'

- script: |
    go get -v -t -d ./...
    IF ERRORLEVEL 1 EXIT /B 1
  workingDirectory: $(modulePath)/tests
  displayName: 'Get dependencies, using go get'


- script: |
    dir "$(modulePath)"
  displayName: 'List contents of modulePath for debugging'

- script: |
    go mod init github.com/yourname/yourrepo
  workingDirectory: $(modulePath)/tests
  displayName: 'Initialize Go module'

- script: |
    go get -v -t -d ./...
    IF ERRORLEVEL 1 EXIT /B 1
  workingDirectory: $(modulePath)/tests
  displayName: 'Get dependencies, using go get'




- script: |
    go test -v -timeout 30m
  env:
    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
  workingDirectory: $(modulePath)/tests
  displayName: 'Run Terratest'
