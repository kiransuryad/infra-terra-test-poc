- powershell: |
    # Download and install Chocolatey directly
    Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
  displayName: 'Install Chocolatey using PowerShell'


- script: |
    $env:ChocolateyInstall/bin/choco install golang -y
    $env:ChocolateyInstall/bin/choco install terraform -y
  displayName: 'Install Go and Terraform using Chocolatey'
  env:
    ChocolateyInstall: C:\ProgramData\chocolatey


- powershell: |
    # Download and install Chocolatey directly
    Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    
    # Refresh environment variables to recognize choco
    $env:Path = [System.Environment]::GetEnvironmentVariable('Path','Machine')
    
    # Now install Go and Terraform using choco
    choco install golang -y
    choco install terraform -y
  displayName: 'Install Chocolatey and then Go and Terraform'


- powershell: |
    New-Item -Path '$(GOBIN)' -ItemType Directory -Force
    New-Item -Path '$(modulePath)' -ItemType Directory -Force
    Write-Host "##vso[task.prependpath]$(GOBIN)"
    Write-Host "##vso[task.prependpath]$(GOROOT)/bin"
  displayName: 'Set up the Go workspace'


- script: |
    echo %PATH%
    "C:\Program Files\Go\bin\go.exe" version
    "C:\Program Files\Go\bin\go.exe" env
  displayName: 'Verify Go Installation'


- script: |
    dir "$(modulePath)"
  displayName: 'List contents of modulePath for debugging'

- script: |
    go get -v -t -d ./...
    IF ERRORLEVEL 1 EXIT /B 1
  workingDirectory: $(modulePath)/tests
  displayName: 'Get dependencies, using go get'


- script: |
    "C:\Program Files\Amazon\AWSCLIV2\aws.exe" --version
  displayName: 'Check AWS CLI Version'



- script: |
    dir "$(modulePath)"
  displayName: 'List contents of modulePath for debugging'

- script: |
    go mod init github.com/yourname/yourrepo
  workingDirectory: $(modulePath)/tests
  displayName: 'Initialize Go module'

- script: |
    go get -v -t -d ./...
    IF ERRORLEVEL 1 EXIT /B 1
  workingDirectory: $(modulePath)/tests
  displayName: 'Get dependencies, using go get'




- script: |
    go test -v -timeout 30m
  env:
    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
  workingDirectory: $(modulePath)/tests
  displayName: 'Run Terratest'


"C:\WINDOWS\system32\cmd.exe" /D /E:ON /V:OFF /S /C "CALL "D:\TFS_BuildAgent\_work\_temp\fd11881b-287d-49e0-857d-2d2f4219c3af.cmd""
# uktfsrmmg01.globalmanagement.support/tfs/DefaultDevCollection/POC0Team0Project/_git/poc_gir_repo/infra-terratest-poc/tests [uktfsrmmg01.globalmanagement.support/tfs/DefaultDevCollection/POC0Team0Project/_git/poc_gir_repo/infra-terratest-poc/tests.test]
.\vpc_test.go:5:2: "strings" imported and not used
.\vpc_test.go:26:17: cannot use initAndApply (variable of type string) as bool value in argument to assert.True
FAIL	uktfsrmmg01.globalmanagement.support/tfs/DefaultDevCollection/POC0Team0Project/_git/poc_gir_repo/infra-terratest-poc/tests [build failed]
##[error]Cmd.exe exited with code '1'.
Finishing: Run Terratest



Starting: Run Terratest
==============================================================================
Task         : Command line
Description  : Run a command line script using Bash on Linux and macOS and cmd.exe on Windows
Version      : 2.178.0
Author       : Microsoft Corporation
Help         : https://docs.microsoft.com/azure/devops/pipelines/tasks/utility/command-line
==============================================================================
Generating script.
Script contents:
"C:\Program Files\Go\bin\go.exe" test -v -timeout 30m
========================== Starting Command Output ===========================
"C:\WINDOWS\system32\cmd.exe" /D /E:ON /V:OFF /S /C "CALL "D:\TFS_BuildAgent\_work\_temp\dd029667-8d98-4114-a6ee-8f773c6e515d.cmd""
=== RUN   TestTerraformVPC
=== PAUSE TestTerraformVPC
=== CONT  TestTerraformVPC
TestTerraformVPC 2023-08-10T17:34:15+01:00 retry.go:91: terraform [init -upgrade=false -no-color]
TestTerraformVPC 2023-08-10T17:34:15+01:00 logger.go:66: Running command terraform with args [init -upgrade=false -no-color]
TestTerraformVPC 2023-08-10T17:34:15+01:00 retry.go:99: Returning due to fatal error: FatalError{Underlying: error while running command: exec: "terraform": executable file not found in %PATH%; }
    apply.go:15: 
        	Error Trace:	D:\TFS_BuildAgent\_work\45\src\infra-terratest-poc\infra-terratest-poc\tests\apply.go:15
        	            				D:\TFS_BuildAgent\_work\45\src\infra-terratest-poc\infra-terratest-poc\tests\vpc_test.go:22
        	Error:      	Received unexpected error:
        	            	FatalError{Underlying: error while running command: exec: "terraform": executable file not found in %PATH%; }
        	Test:       	TestTerraformVPC
TestTerraformVPC 2023-08-10T17:34:15+01:00 retry.go:91: terraform [destroy -auto-approve -input=false -no-color -lock=false]
TestTerraformVPC 2023-08-10T17:34:15+01:00 logger.go:66: Running command terraform with args [destroy -auto-approve -input=false -no-color -lock=false]
TestTerraformVPC 2023-08-10T17:34:15+01:00 retry.go:99: Returning due to fatal error: FatalError{Underlying: error while running command: exec: "terraform": executable file not found in %PATH%; }
    destroy.go:11: 
        	Error Trace:	D:\TFS_BuildAgent\_work\45\src\infra-terratest-poc\infra-terratest-poc\tests\destroy.go:11
        	            				D:\TFS_BuildAgent\_work\45\src\infra-terratest-poc\infra-terratest-poc\tests\panic.go:523
        	            				D:\TFS_BuildAgent\_work\45\src\infra-terratest-poc\infra-terratest-poc\tests\testing.go:999
        	            				D:\TFS_BuildAgent\_work\45\src\infra-terratest-poc\infra-terratest-poc\tests\apply.go:15
        	            				D:\TFS_BuildAgent\_work\45\src\infra-terratest-poc\infra-terratest-poc\tests\vpc_test.go:22
        	Error:      	Received unexpected error:
        	            	FatalError{Underlying: error while running command: exec: "terraform": executable file not found in %PATH%; }
        	Test:       	TestTerraformVPC
--- FAIL: TestTerraformVPC (0.00s)
FAIL
exit status 1
FAIL	uktfsrmmg01.globalmanagement.support/tfs/DefaultDevCollection/POC0Team0Project/_git/poc_gir_repo/infra-terratest-poc/tests	2.524s
##[error]Cmd.exe exited with code '1'.
Finishing: Run Terratest


- script: |
    echo '##vso[task.prependpath]C:\ProgramData\chocolatey\bin'
  displayName: 'Add Terraform to PATH'




Verify the Terraform Installation Path:
Before running Terratest, let's check if Terraform is indeed installed in the expected directory.

Add this step to your pipeline:

yaml
Copy code
- script: |
    dir C:\ProgramData\chocolatey\bin
  displayName: 'List Chocolatey bin directory'
This will list the contents of the Chocolatey bin directory. Check the output to ensure terraform.exe is present.

2. Use Absolute Path in Terratest:
As a workaround, if you know the absolute path to terraform.exe, you can specify that in the Terratest code.

Modify the terraformOptions in your test:

go
Copy code
terraformOptions := &terraform.Options{
    TerraformDir: "../infrastructure",
    TerraformBinary: "C:\\ProgramData\\chocolatey\\bin\\terraform.exe",
    NoColor: true,
}
The TerraformBinary option allows you to specify the path to the terraform binary. By providing an absolute path, you ensure Terratest doesn't rely on the system's PATH to find Terraform.

3. Reinstall Terraform:
Another approach would be to reinstall Terraform. Perhaps there was an issue with the initial installation.

yaml
Copy code
- script: |
    choco uninstall terraform -y
    choco install terraform -y
  displayName: 'Reinstall Terraform using Chocolatey'
After reinstalling, try running Terratest again.

4. Set Terraform Path for the Entire Job:
It's possible that the PATH modification isn't persistent across steps. You can try setting the PATH environment variable for the entire job:

yaml
Copy code
variables:
  PATH: 'C:\ProgramData\chocolatey\bin;$(PATH)'
This prepends the Chocolatey bin directory to the PATH for all subsequent steps in the job.

Try one or a combination of the above solutions and see if they help resolve the issue. If the problem persists, there might be other environmental factors at play that are specific to your Azure DevOps setup or agent configuration.



trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:
- script: |
    Invoke-WebRequest -Uri "https://awscli.amazonaws.com/AWSCLIV2.msi" -OutFile "AWSCLIV2.msi"
    Start-Process msiexec.exe -Wait -ArgumentList '/i AWSCLIV2.msi /quiet'
  displayName: 'Install AWS CLI'
  
- script: |
    aws --version
  displayName: 'Check AWS CLI Version'



To generate a report using go-junit-report for your Terratest cases in the provided Azure DevOps pipeline, you should:

Install go-junit-report.
Update your Terratest command to produce the JUnit XML report.
Publish the JUnit report in Azure DevOps.
Let's break down these steps and integrate them into your pipeline:

1. Install go-junit-report:
Add a step after your go get dependencies step to install go-junit-report:

yaml
Copy code
- script: |
    go get -u github.com/jstemmer/go-junit-report
  displayName: 'Install go-junit-report'
2. Update Terratest Command:
Modify your Terratest run command to generate the JUnit XML report. We'll save the standard go test output to a file, then use go-junit-report to convert that file to the JUnit format:

yaml
Copy code
- script: |
    echo '##vso[task.prependpath]C:\ProgramData\chocolatey\bin'
    "C:\Program Files\Go\bin\go.exe" test -v -timeout 30m ./... 2>&1 | tee test-output.txt
    "C:\Program Files\Go\bin\go-junit-report" < test-output.txt > report.xml
  env:
    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
  workingDirectory: $(modulePath)/infra-terratest-poc/tests
  displayName: 'Run Terratest and generate report'
Here, we're using the tee command to both display the test results in the pipeline logs and save them to a file named test-output.txt. We then process this file using go-junit-report to generate the report.xml file.

3. Publish the JUnit Report:
After the Terratest run, add a step to publish the JUnit report to Azure DevOps:

yaml
Copy code
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(modulePath)/infra-terratest-poc/tests/report.xml'
  condition: always()
  displayName: 'Publish Test Results'
The condition: always() ensures the test results are published even if the Terratest run fails.

With these changes, after your pipeline runs, you'll be able to see the Terratest results in the "Tests" tab of your Azure DevOps pipeline run. This gives you a more structured view of which tests passed or failed, along with any associated logs or error messages.



- script: |
    "C:\Program Files\Amazon\AWSCLIV2\aws.exe" --version
  displayName: 'Check AWS CLI Version'

- powershell: |
    Install-Module -Name AWS.Tools.Installer -Force -AllowClobber -Scope CurrentUser
    Install-AWSToolsModule AWS.Tools.S3 -Force -Scope CurrentUser

    $AccessKey = "$(AWS_ACCESS_KEY_ID)"
    $SecretKey = "$(AWS_SECRET_ACCESS_KEY)"
    $BucketName = "your-bucket-name"

    Set-AWSCredentials -AccessKey $AccessKey -SecretKey $SecretKey -StoreAs default

    # List all objects in the specified S3 bucket
    Get-S3Object -BucketName $BucketName | ForEach-Object { Write-Output $_.Key }
  displayName: 'List S3 Objects using PowerShell'



Get-S3Bucket | ForEach-Object { Write-Output $_.BucketName }


At D:\TFS_BuildAgent\_work\_temp\160e30c2-4ba9-4832-b6a6-803ae20761e6.ps1:4 char:34
+ "C:\Program Files\Go\bin\go.exe" test -v -timeout 30m ./... 2>&1 | Ou ...
+                                  ~~~~
Unexpected token 'test' in expression or statement.
At D:\TFS_BuildAgent\_work\_temp\160e30c2-4ba9-4832-b6a6-803ae20761e6.ps1:6 char:43
+ "C:\Program Files\Go\bin\go-junit-report" < test-output.txt > report. ...
+                                           ~
The '<' operator is reserved for future use.
    + CategoryInfo          : ParserError: (:) [], ParseException
    + FullyQualifiedErrorId : UnexpectedToken
 
- powershell: |
    echo '##vso[task.prependpath]C:\ProgramData\chocolatey\bin'
    & "C:\Program Files\Go\bin\go.exe" test -v -timeout 30m ./... 2>&1 | Out-File -FilePath test-output.txt
    Get-Content -Path test-output.txt
    $content = Get-Content -Raw -Path test-output.txt
    $report = & "C:\Program Files\Go\bin\go-junit-report" $content
    $report | Out-File -FilePath report.xml
  env:
    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
  workingDirectory: $(modulePath)/infra-terratest-poc/tests
  displayName: 'Run Terratest and generate report using PowerShell'



- powershell: |
    # Install go-junit-report
    & "C:\Program Files\Go\bin\go.exe" get -u github.com/jstemmer/go-junit-report

    # Run Terratest
    echo '##vso[task.prependpath]C:\ProgramData\chocolatey\bin'
    & "C:\Program Files\Go\bin\go.exe" test -v -timeout 30m ./... 2>&1 | Out-File -FilePath test-output.txt
    Get-Content -Path test-output.txt

    # Generate JUnit report
    $content = Get-Content -Raw -Path test-output.txt
    $report = & "$(GOBIN)\go-junit-report.exe" $content
    $report | Out-File -FilePath report.xml
  env:
    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
  workingDirectory: $(modulePath)/infra-terratest-poc/tests
  displayName: 'Run Terratest, Install go-junit-report and generate report'


